应用程序接口（Application Programming Interfaces(API)）是一套建立好的代码组件，通常分为两类：浏览器API和第三方API。浏览器API内建于web浏览器中，包括文档对象模型API（Document Object Model (DOM)API）,地理位置API(Geolocation API),Canvas 和 WebGL API等等。

解释型(interpret)代码和编译型(compile)代码
解释型语言代码自上而下运行，且实时返回运行结果。代码在由浏览器执行前，无需将其转化为其他形式。代码将以它自身的对程序员友好的文本格式(text form)接收并直接处理。
编译型语言代码需要先转化（编译）成另一种形式才得以运行。
JavaScript是轻量级解释型语言。浏览器接受到JavaScript代码，并以代码自身的文本格式运行它。从技术角度上看，几乎所有现代的JavaScript转换器都运用一种叫做即时编译（just-in-time compiling）的技术来改善它的表现；当JavaScript源代码被执行时，它便会被编译成一种更快，二进制的格式，这将使其的运行速度尽可能地快。尽管如此，JavaScript仍然被认为是一种解释性语言，因为编译是在代码运行中而非之前发生的。

脚本调用策略
调用外部js脚本时有两种解决脚本阻塞问题的方案——async和defer。浏览器遇到async脚本时不会中断后续HTML内容的加载，不会阻塞页面渲染，而是直接下载然后运行，这样脚本的运行次序就无法控制。添加defer属性的脚本将按照在页面中出现的顺序加载。
小结：
如果脚本无需等待页面解析，且无依赖独立运行，那么应使用 async。
如果脚本需要等待解析，且依赖于其它脚本，调用这些脚本时应使用 defer，将关联的脚本按所需顺序置于 HTML 中。