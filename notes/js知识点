应用程序接口（Application Programming Interfaces(API)）是一套建立好的代码组件，通常分为两类：浏览器API和第三方API。浏览器API内建于web浏览器中，包括文档对象模型API（Document Object Model (DOM)API）,地理位置API(Geolocation API),Canvas 和 WebGL API等等。

解释型(interpret)代码和编译型(compile)代码
解释型语言代码自上而下运行，且实时返回运行结果。代码在由浏览器执行前，无需将其转化为其他形式。代码将以它自身的对程序员友好的文本格式(text form)接收并直接处理。
编译型语言代码需要先转化（编译）成另一种形式才得以运行。
JavaScript是轻量级解释型语言。浏览器接受到JavaScript代码，并以代码自身的文本格式运行它。从技术角度上看，几乎所有现代的JavaScript转换器都运用一种叫做即时编译（just-in-time compiling）的技术来改善它的表现；当JavaScript源代码被执行时，它便会被编译成一种更快，二进制的格式，这将使其的运行速度尽可能地快。尽管如此，JavaScript仍然被认为是一种解释性语言，因为编译是在代码运行中而非之前发生的。

脚本调用策略
调用外部js脚本时有两种解决脚本阻塞问题的方案——async和defer。浏览器遇到async脚本时不会中断后续HTML内容的加载，不会阻塞页面渲染，而是直接下载然后运行，这样脚本的运行次序就无法控制。添加defer属性的脚本将按照在页面中出现的顺序加载。
小结：
如果脚本无需等待页面解析，且无依赖独立运行，那么应使用 async。
如果脚本需要等待解析，且依赖于其它脚本，调用这些脚本时应使用 defer，将关联的脚本按所需顺序置于 HTML 中。

可以用常量保存对界面元素的引用，界面元素的文字可能会改变，但引用是不变的。

var 和 let 的区别：
1.var 可以进行变量提升，let 不可以；
2.var 可以重复声明变量，let 不可以。

在javascript中，一切东西都可以被当作对象，可以使用相应的对象方法。
许多你调用（运行或者执行的专业词语）浏览器内置函数时调用的代码并不是使用JavaScript来编写——大多数调用浏览器后台的函数的代码，是使用像C++这样更低级的系统语言编写的，而不是像JavaScript这样的web编程语言

document.querySelector()是推荐的主流方法，可通过id,class,tag选择元素。querySelector()返回找到的第一个元素，querySelectorAll()返回找到的所有元素。

js动态修改css样式的四种方法(以background-color为例)：
1.通过HTMLElement.style修改，相当于内联样式
HTMLElement.style.backgroundColor = "black";
2.通过HTMLElement.style.cssText修改，相当于内联样式(cssText 的本质就是设置 HTML 元素的 style 属性值。)
HTMLElement.style.cssText = "background-color: black";
3.通过HTMLElement.setAttribute修改，不是内联样式
HTMLElement.setAttribute("background-color","black");
4.通过更改外联的css文件
<link href="css1.css" rel="stylesheet" type="text/css" id="css"/>
document.getElementById("css").setAttribute("href","css2.css");
ps:还可以通过修改className来改变样式

堆内存和栈内存：栈内存空间有限，由操作系统自动分配和释放，堆内存空间较大，需要手动申请和释放，常用new关键字来分配。

队列是先进先出,栈是先进后出

sort()方法默认排序方法是将数组元素转化成字符串，然后比较它们的字符编码顺序排列。如果指明了compareFunction,那么数组会按照调用该函数的返回值排序。
https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort

